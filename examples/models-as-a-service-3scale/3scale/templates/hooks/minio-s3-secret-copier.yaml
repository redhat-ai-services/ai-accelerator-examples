{{- $hasStorageClass := .Values.apimanager.storageClassName | default "" }}
{{- if (not $hasStorageClass) }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: minio-s3-secret-copier
  namespace: {{ .Values.namespace }}
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
    argocd.argoproj.io/sync-wave: "0"
  labels:
    {{- include "3scale.labels" . | nindent 4 }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: minio-s3-secret-copier
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
    argocd.argoproj.io/sync-wave: "0"
  labels:
    {{- include "3scale.labels" . | nindent 4 }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: minio-s3-secret-copier
  namespace: {{ .Values.namespace }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: minio-s3-secret-copier
  namespace: 3scale
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
    argocd.argoproj.io/sync-wave: "0"
  labels:
    {{- include "3scale.labels" . | nindent 4 }}
data:
  playbook.yaml: |
    ---
    - name: Copy Minio S3 secret
      hosts: localhost
      connection: local
      gather_facts: false
      tasks:
        - name: Check Minio credential availability in the Minio namespace
          kubernetes.core.k8s_info:
            api_version: v1
            kind: Secret
            name: minio
            namespace: minio
          register: r_minio_secret
          retries: "60"
          delay: "5"
          until:
          - r_minio_secret is defined
          - r_minio_secret.resources is defined
          - r_minio_secret.resources | length > 0
          - r_minio_secret.resources[0].data.AWS_ACCESS_KEY_ID is defined
          - r_minio_secret.resources[0].data.AWS_SECRET_ACCESS_KEY is defined
        - name: Extract AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY from Minio secret
          ansible.builtin.set_fact:
            aws_access_key_id: '{{ "{{" }} r_minio_secret.resources[0].data.AWS_ACCESS_KEY_ID {{ "}}" }}'
            aws_secret_access_key: '{{ "{{" }} r_minio_secret.resources[0].data.AWS_SECRET_ACCESS_KEY {{ "}}" }}'
        - name: Create or modify minio-s3-auth secret with the extracted Minio credentials
          kubernetes.core.k8s:
            state: present
            definition:
              apiVersion: v1
              kind: Secret
              metadata:
                name: minio-s3-auth
                namespace: {{ .Values.namespace }}
              labels:
                apimanager.apps.3scale.net/watched-by: apimanager
                patch.marker: "true"
              type: Opaque
              data:
                AWS_ACCESS_KEY_ID: "{{ "{{" }} aws_access_key_id {{ "}}" }}"
                AWS_SECRET_ACCESS_KEY: "{{ "{{" }} aws_secret_access_key {{ "}}" }}"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: minio-s3-secret-copier
  namespace: {{ .Values.namespace }}
  annotations:
    argocd.argoproj.io/hook: Sync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
    argocd.argoproj.io/sync-wave: "0"
  labels:
    {{- include "3scale.labels" . | nindent 4 }}
spec:
  backoffLimit: 3
  template:
    spec:
      serviceAccountName: minio-s3-secret-copier
      restartPolicy: Never
      containers:
      - name: ansible
        image: {{ .Values.images.multicloud }}
        command: ["ansible-playbook"]
        args: ["/ansible/playbook.yaml"]
        volumeMounts:
        - name: ansible
          mountPath: /ansible
      volumes:
      - name: ansible
        configMap:
          name: minio-s3-secret-copier
{{- end }}
